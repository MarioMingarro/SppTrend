t_value <- summary(model_i)$coefficients[2, 3]
p_value <- summary(model_i)$coefficients[2, 4]
ci <- confint(model_i, predictor, level = .95)[, ]
interaction_term <- paste0(predictor, ":groupi")
dif_t <- if (interaction_term %in% rownames(summary(model_int)$coefficients)) {
summary(model_int)$coefficients[interaction_term, 3]
} else {
NA
}
dif_p <- if (interaction_term %in% rownames(summary(model_int)$coefficients)) {
summary(model_int)$coefficients[interaction_term, 4]
} else {
NA
}
if (responses[i] == "Lat" && h == "South") {
trend <- trend
}
results_list[[length(results_list) + 1]] <- data.frame(
species = spp[n],
responses = responses[i],
trend = trend,
t = t_value,
pvalue = p_value,
ci_95_max = ci[2],
ci_95_min = ci[1],
dif_t = dif_t,
dif_pvalue = dif_p,
n = nrow(ind_hemisphere),
hemisphere = h
)
} else {
cat(
paste0(
"WARNING: Specie ",
spp[n],
" response (",
responses[i],
") has insufficient data (",
nrow(ind_hemisphere),
") in ",
h,
" hemisphere.\n"
)
)
}
}, error = function(e) {
cat(
paste0(
"WARNING: Specie ",
if (nrow(ind_hemisphere) > 0)
ind_hemisphere[1, 1]
else
spp[n],
" responses (",
responses[i],
") in ",
h,
" hemisphere has error: ",
conditionMessage(e),
"\n"
)
)
})
}
} else {
print(paste0(
"WARNING: Specie ",
spp[n],
" has few data (",
nrow(ind_hemisphere),
") in ",
h,
" hemisphere"
))
}
}
if (all(c("North", "South") %in% hemispheres_present)) {
for (i in 1:length(responses)) {
tryCatch({
if (nrow(ind) > n_min) {
Data$group_global <- "g"
ind$group_global <- "i"
dat_global <- rbind(Data, ind)
if (responses[i] == "Lon") {
ind$Lon_transformed <- (ind$Lon + 180) %% 360
dat_global$Lon_transformed <- (dat_global$Lon + 180) %% 360
model_i_global <- lm(formula(paste(
"Lon_transformed",
paste(predictor, collapse = "+"),
sep = " ~ "
)), data = ind)
model_int_global <- lm(formula(paste(
"Lon_transformed",
paste(predictor, "*group_global", collapse = "+"),
sep = " ~ "
)), data = dat_global)
} else {
model_i_global <- lm(formula(paste(
responses[i],
paste(predictor, collapse = "+"),
sep = " ~ "
)), data = ind)
model_int_global <- lm(formula(paste(
responses[i],
paste(predictor, "*group_global", collapse = "+"),
sep = " ~ "
)), data = dat_global)
}
trend_global <- coef(model_i_global)[2]
t_value_global <- summary(model_i_global)$coefficients[2, 3]
p_value_global <- summary(model_i_global)$coefficients[2, 4]
ci_global <- confint(model_i_global, predictor, level = .95)[, ]
interaction_term_global <- paste0(predictor, ":group_globali")
dif_t_global <- if (interaction_term_global %in% rownames(summary(model_int_global)$coefficients)) {
summary(model_int_global)$coefficients[interaction_term_global, 3]
} else {
NA
}
dif_p_global <- if (interaction_term_global %in% rownames(summary(model_int_global)$coefficients)) {
summary(model_int_global)$coefficients[interaction_term_global, 4]
} else {
NA
}
results_list[[length(results_list) + 1]] <- data.frame(
species = spp[n],
responses = responses[i],
trend = trend_global,
t = t_value_global,
pvalue = p_value_global,
ci_95_max = ci_global[2],
ci_95_min = ci_global[1],
dif_t = dif_t_global,
dif_pvalue = dif_p_global,
n = nrow(ind),
hemisphere = "Both"
)
} else {
cat(
paste0(
"WARNING: Specie ",
spp[n],
" response (",
responses[i],
") has insufficient data (",
nrow(ind),
") for global analysis.\n"
)
)
}
}, error = function(e) {
cat(
paste0(
"WARNING: Specie ",
if (nrow(ind) > 0)
ind[1, 1]
else
spp[n],
" responses (",
responses[i],
") has error (global): ",
conditionMessage(e),
"\n"
)
)
})
}
}
}
if (length(results_list) > 0) {
spp_trend_result <- do.call(rbind, results_list)
rownames(spp_trend_result) <- NULL
} else {
spp_trend_result <- data.frame()
}
return(spp_trend_result)
}
spp_trends_results <- spp_trend(Data, spp, predictor, responses, n_min = 2)
View(spp_trends_results)
Data <- data.frame(
species = sample(paste0("spp_", 1:10), 100, replace = TRUE),
year = sample(1950:2023, 100, replace = TRUE),
month = sample(1:12, 100, replace = TRUE),
Lon = runif(100, -10, 20),
Lat = runif(100, 30, 70)
)
Data <- get_dem_elevation(Data, dem_file)
Data <- get_era5_tme(Data, nc_file, month_col = "month")
predictor <- "year"
responses <- c("Lat", "elevation", "Tme" )
spp <- unique(Data$species)
spp_trends_results <- spp_trend(Data, spp, predictor, responses, n_min = 2)
View(spp_trends_results)
View(Data)
#'
#' @importFrom dplyr select mutate case_when all_of lead group_by summarise if_else ungroup
#' @importFrom tidyr pivot_wider
#'
#' @examples
#' \dontrun{
#' # Example data remains the same
#' }
#'
#' @export
spp_strategy <- function(spp_trend_result,
sig_level = 0.05,
responses = responses) {
classify_spatial_standard <- function(pvalue, dif_pvalue, trend) {
dplyr::case_when(
pvalue > sig_level ~ "SC",
pvalue <= sig_level &
dif_pvalue <= sig_level & trend > 0 ~ "SA",
pvalue <= sig_level &
dif_pvalue <= sig_level & trend < 0 ~ "SD",
TRUE ~ "SC"
)
}
classify_lat_poleward <- function(pvalue, dif_pvalue, trend, hemisphere) {
dplyr::case_when(
pvalue > sig_level ~ "SC",
pvalue <= sig_level &
dif_pvalue <= sig_level &
trend > 0 & hemisphere == "North" ~ "SP",
pvalue <= sig_level &
dif_pvalue <= sig_level &
trend < 0 & hemisphere == "North" ~ "SE",
pvalue <= sig_level &
dif_pvalue <= sig_level &
trend > 0 & hemisphere == "South" ~ "SE",
pvalue <= sig_level &
dif_pvalue <= sig_level &
trend < 0 & hemisphere == "South" ~ "SP",
pvalue <= sig_level &
dif_pvalue <= sig_level &
trend > 0 & hemisphere == "Both" ~ "SA",
pvalue <= sig_level &
dif_pvalue <= sig_level &
trend < 0 & hemisphere == "Both" ~ "SD",
TRUE ~ "SC"
)
}
classify_thermal <- function(pvalue, dif_pvalue, trend) {
dplyr::case_when(
pvalue > sig_level ~ "TC",
pvalue <= sig_level &
dif_pvalue <= sig_level & trend < 0 ~ "TA",
pvalue <= sig_level &
dif_pvalue <= sig_level & trend > 0 ~ "TT",
TRUE ~ "TC"
)
}
required_cols <- c(
"species",
"trend",
"t",
"pvalue",
"responses",
"dif_t",
"dif_pvalue",
"n",
"hemisphere"
)
if (!all(required_cols %in% names(spp_trend_result))) {
missing_cols <- setdiff(required_cols, names(spp_trend_result))
stop(
paste(
"Error: The following columns were not found in 'spp_trends_results':",
paste(missing_cols, collapse = ", "),
". The required columns are:",
paste(required_cols, collapse = ", ")
)
)
}
strategies <- spp_trend_result %>%
dplyr::select(dplyr::all_of(intersect(
required_cols, names(spp_trends_result)
))) %>%
dplyr::mutate(
Spatial_Lat_Poleward = dplyr::case_when(
.data$responses == "Lat" ~ classify_lat_poleward(
.data$pvalue,
.data$dif_pvalue,
.data$trend,
.data$hemisphere
),
TRUE ~ NA_character_
),
Spatial_Lon = dplyr::case_when(
.data$responses == "Lon" ~ classify_spatial_standard(.data$pvalue, .data$dif_pvalue, .data$trend),
TRUE ~ NA_character_
),
Spatial_Ele = dplyr::case_when(
.data$responses == "Ele" ~ classify_spatial_standard(.data$pvalue, .data$dif_pvalue, .data$trend),
TRUE ~ NA_character_
),
Thermal_Tmx = dplyr::case_when(
.data$responses == "Tmx" ~ classify_thermal(.data$pvalue, .data$dif_pvalue, .data$trend),
TRUE ~ NA_character_
),
Thermal_Tmn = dplyr::case_when(
.data$responses == "Tmn" ~ classify_thermal(.data$pvalue, .data$dif_pvalue, .data$trend),
TRUE ~ NA_character_
),
Thermal_Tme = dplyr::case_when(
.data$responses == "Tme" ~ classify_thermal(.data$pvalue, .data$dif_pvalue, .data$trend),
TRUE ~ NA_character_
)
) %>%
dplyr::group_by(species, hemisphere) %>%
dplyr::summarise(
n = sum(n),
Spatial_Lat_Poleward = dplyr::first(Spatial_Lat_Poleward),
Spatial_Lon = if ("Lon" %in% unique(responses))
dplyr::first(Spatial_Lon[!is.na(Spatial_Lon)])
else
NULL,
Spatial_Ele = if ("Ele" %in% unique(responses))
dplyr::first(Spatial_Ele[!is.na(Spatial_Ele)])
else
NULL,
Thermal_Tmx = if ("Tmx" %in% unique(responses))
dplyr::first(Thermal_Tmx[!is.na(Thermal_Tmx)])
else
NULL,
Thermal_Tmn = if ("Tmn" %in% unique(responses))
dplyr::first(Thermal_Tmn[!is.na(Thermal_Tmn)])
else
NULL,
Thermal_Tme = if ("Tme" %in% unique(responses))
dplyr::first(Thermal_Tme[!is.na(Thermal_Tme)])
else
NULL,
.groups = "drop"
) %>%
tidyr::pivot_wider(
names_from = hemisphere,
values_from = Spatial_Lat_Poleward,
names_prefix = "Lat_"
) %>%
dplyr::ungroup()
}
spp_strategy_results <- spp_strategy(spp_trend_result, bonferroni = 0.05, responses = responses)
spp_strategy_results <- spp_strategy(spp_trend_result, sig_level = 0.05, responses = responses)
spp_strategy_results <- spp_strategy(spp_trends_results, sig_level = 0.05, responses = responses)
library(dplyr)
spp_strategy_results <- spp_strategy(spp_trends_results, sig_level = 0.05, responses = responses)
#'
#' @importFrom dplyr select mutate case_when all_of lead group_by summarise if_else ungroup
#' @importFrom tidyr pivot_wider
#'
#' @examples
#' \dontrun{
#' # Example data remains the same
#' }
#'
#' @export
spp_strategy <- function(spp_trend_result,
sig_level = 0.05,
responses = responses) {
classify_spatial_standard <- function(pvalue, dif_pvalue, trend) {
dplyr::case_when(
pvalue > sig_level ~ "SC",
pvalue <= sig_level &
dif_pvalue <= sig_level & trend > 0 ~ "SA",
pvalue <= sig_level &
dif_pvalue <= sig_level & trend < 0 ~ "SD",
TRUE ~ "SC"
)
}
classify_lat_poleward <- function(pvalue, dif_pvalue, trend, hemisphere) {
dplyr::case_when(
pvalue > sig_level ~ "SC",
pvalue <= sig_level &
dif_pvalue <= sig_level &
trend > 0 & hemisphere == "North" ~ "SP",
pvalue <= sig_level &
dif_pvalue <= sig_level &
trend < 0 & hemisphere == "North" ~ "SE",
pvalue <= sig_level &
dif_pvalue <= sig_level &
trend > 0 & hemisphere == "South" ~ "SE",
pvalue <= sig_level &
dif_pvalue <= sig_level &
trend < 0 & hemisphere == "South" ~ "SP",
pvalue <= sig_level &
dif_pvalue <= sig_level &
trend > 0 & hemisphere == "Both" ~ "SA",
pvalue <= sig_level &
dif_pvalue <= sig_level &
trend < 0 & hemisphere == "Both" ~ "SD",
TRUE ~ "SC"
)
}
classify_thermal <- function(pvalue, dif_pvalue, trend) {
dplyr::case_when(
pvalue > sig_level ~ "TC",
pvalue <= sig_level &
dif_pvalue <= sig_level & trend < 0 ~ "TA",
pvalue <= sig_level &
dif_pvalue <= sig_level & trend > 0 ~ "TT",
TRUE ~ "TC"
)
}
required_cols <- c(
"species",
"trend",
"t",
"pvalue",
"responses",
"dif_t",
"dif_pvalue",
"n",
"hemisphere"
)
if (!all(required_cols %in% names(spp_trend_result))) {
missing_cols <- setdiff(required_cols, names(spp_trend_result))
stop(
paste(
"Error: The following columns were not found in 'spp_trend_result':",
paste(missing_cols, collapse = ", "),
". The required columns are:",
paste(required_cols, collapse = ", ")
)
)
}
strategies <- spp_trend_result %>%
dplyr::select(dplyr::all_of(intersect(
required_cols, names(spp_trend_result)
))) %>%
dplyr::mutate(
Spatial_Lat_Poleward = dplyr::case_when(
.data$responses == "Lat" ~ classify_lat_poleward(
.data$pvalue,
.data$dif_pvalue,
.data$trend,
.data$hemisphere
),
TRUE ~ NA_character_
),
Spatial_Lon = dplyr::case_when(
.data$responses == "Lon" ~ classify_spatial_standard(.data$pvalue, .data$dif_pvalue, .data$trend),
TRUE ~ NA_character_
),
Spatial_Ele = dplyr::case_when(
.data$responses == "Ele" ~ classify_spatial_standard(.data$pvalue, .data$dif_pvalue, .data$trend),
TRUE ~ NA_character_
),
Thermal_Tmx = dplyr::case_when(
.data$responses == "Tmx" ~ classify_thermal(.data$pvalue, .data$dif_pvalue, .data$trend),
TRUE ~ NA_character_
),
Thermal_Tmn = dplyr::case_when(
.data$responses == "Tmn" ~ classify_thermal(.data$pvalue, .data$dif_pvalue, .data$trend),
TRUE ~ NA_character_
),
Thermal_Tme = dplyr::case_when(
.data$responses == "Tme" ~ classify_thermal(.data$pvalue, .data$dif_pvalue, .data$trend),
TRUE ~ NA_character_
)
) %>%
dplyr::group_by(species, hemisphere) %>%
dplyr::summarise(
n = sum(n),
Spatial_Lat_Poleward = dplyr::first(Spatial_Lat_Poleward),
Spatial_Lon = if ("Lon" %in% unique(responses))
dplyr::first(Spatial_Lon[!is.na(Spatial_Lon)])
else
NULL,
Spatial_Ele = if ("Ele" %in% unique(responses))
dplyr::first(Spatial_Ele[!is.na(Spatial_Ele)])
else
NULL,
Thermal_Tmx = if ("Tmx" %in% unique(responses))
dplyr::first(Thermal_Tmx[!is.na(Thermal_Tmx)])
else
NULL,
Thermal_Tmn = if ("Tmn" %in% unique(responses))
dplyr::first(Thermal_Tmn[!is.na(Thermal_Tmn)])
else
NULL,
Thermal_Tme = if ("Tme" %in% unique(responses))
dplyr::first(Thermal_Tme[!is.na(Thermal_Tme)])
else
NULL,
.groups = "drop"
) %>%
tidyr::pivot_wider(
names_from = hemisphere,
values_from = Spatial_Lat_Poleward,
names_prefix = "Lat_"
) %>%
dplyr::ungroup()
}
spp_strategy_results <- spp_strategy(spp_trends_results, sig_level = 0.05, responses = responses)
View(spp_strategy_results)
library(devtools)
document()
document()
document()
document()
document()
document()
document()
test()
document()
test()
test()
document()
test()
build()
library(SppTrend)
remove.packages("SppTrend")
document()
