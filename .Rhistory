}
results_list[[length(results_list) + 1]] <- data.frame(
species = spp[n],
responses = responses[i],
trend = trend,
t = t_value,
pvalue = p_value,
ci_95_max = ci[2],
ci_95_min = ci[1],
dif_t = dif_t,
dif_pvalue = dif_p,
n = nrow(ind_sub),
hemisphere = h
)
} else {
cat(paste0("WARNING: Specie ", spp[n], " responses (", responses[i], ") has insufficient data.\n"))
}
}, error = function(e) {
cat(
paste0(
"WARNING: Specie ",
ind_sub[1, 1],
" responses (",
responses[i],
") has error: ",
conditionMessage(e),
"\n"
)
)
})
}
} else {
print(paste0("WARNING: Specie ", spp[n], " has few data in ", h, " hemisphere"))
}
}
}
if (length(results_list) > 0) {
spp_trend_result <- do.call(rbind, results_list)
} else {
spp_trend_result <- data.frame()
}
return(spp_trend_result)
}
spp_trends_world_results <- spp_trend_world_corrected(Data, spp, predictor, responses, n_min = 10)
View(spp_trends_world_results)
spp_strategy_poleward_results <- spp_strategy_poleward(spp_trends_world_results, bonferroni = bonferroni_alpha, responses = responses)
View(spp_strategy_poleward_results)
Data <- readRDS("C:/A_TRABAJO/A_JORGE/SPP_VIRTUALES/SPATIAL/Ocurrencias_aleatorias/muestreo_aleat_SA_SC_SD_percent_0.001.RDS")
colnames(Data)
colnames(Data) <- c("species","year","month","Lon","Lat","Tmx","Tmn","Tme","spatialthermaltype")
colnames(Data) <- c("species","year","month","Lon","Lat","Tmx","Tmn","spatialthermaltype")
Data$year_month <- Data$month * 0.075
Data$year_month <- Data$year + Data$year_month
predictor <- "year_month"
responses <- c("Lat")
spp <- unique(Data$species)
predictor <- "year"
responses <- c("Lat")
spp <- unique(Data$species)
library(tictoc)
tic()
spp_trends_world_results <- spp_trend_world_corrected(Data, spp, predictor, responses, n_min = 10)
spp_trend_world_corrected <- function(Data, spp, predictor, responses, n_min = 50) {
# Crear la columna 'hemisphere' en Data al inicio de la función
Data$hemisphere <- ifelse(Data$Lat >= 0, "North", "South")
results_list <- list()
for (n in 1:length(spp)) {
ind <- Data[Data$species == spp[n], ]
ind_list <- split(ind, f = ind$hemisphere)
for (h in names(ind_list)) {
ind_sub <- ind_list[[h]]
data_hemisphere <- Data[Data$hemisphere == h, ]
if (nrow(ind_sub) > n_min) {
for (i in 1:length(responses)) {
tryCatch({
if (nrow(ind_sub) > 0 && nrow(data_hemisphere) > 0) {
ind_sub$group <- "i"
data_hemisphere$group <- "g"
dat <- rbind(data_hemisphere, ind_sub)
if (responses[i] == "Lon") {
ind_sub$Lon_transformed <- transform_lon_antimeridian(ind_sub$Lon)
dat$Lon_transformed <- transform_lon_antimeridian(dat$Lon) #Transformar también dat
model_i <- lm(formula(paste("Lon_transformed", paste(predictor, collapse = "+"), sep = " ~ ")), data = ind_sub)
model_int <- lm(formula(paste("Lon_transformed", paste(predictor, "*group", collapse = "+"), sep = " ~ ")), data = dat)
} else {
model_i <- lm(formula(paste(responses[i], paste(predictor, collapse = "+"), sep = " ~ ")), data = ind_sub)
model_int <- lm(formula(paste(responses[i], paste(predictor, "*group", collapse = "+"), sep = " ~ ")), data = dat)
}
trend <- coef(model_i)[2]
t_value <- summary(model_i)$coefficients[2, 3]
p_value <- summary(model_i)$coefficients[2, 4]
ci <- confint(model_i, predictor, level = .95)[, ]
dif_t <- summary(model_int)$coefficients[4, 3]
dif_p <- summary(model_int)$coefficients[4, 4]
if (responses[i] == "Lat" && h == "South") {
trend <- -trend
}
results_list[[length(results_list) + 1]] <- data.frame(
species = spp[n],
responses = responses[i],
trend = trend,
t = t_value,
pvalue = p_value,
ci_95_max = ci[2],
ci_95_min = ci[1],
dif_t = dif_t,
dif_pvalue = dif_p,
n = nrow(ind_sub),
hemisphere = h
)
} else {
cat(paste0("WARNING: Specie ", spp[n], " responses (", responses[i], ") has insufficient data.\n"))
}
}, error = function(e) {
cat(
paste0(
"WARNING: Specie ",
ind_sub[1, 1],
" responses (",
responses[i],
") has error: ",
conditionMessage(e),
"\n"
)
)
})
}
} else {
print(paste0("WARNING: Specie ", spp[n], " has few data in ", h, " hemisphere"))
}
}
}
if (length(results_list) > 0) {
spp_trend_result <- do.call(rbind, results_list)
} else {
spp_trend_result <- data.frame()
}
return(spp_trend_result)
}
# Función auxiliar para transformar la longitud
transform_lon_antimeridian <- function(lon) {
lon_transformed <- ifelse(lon > 180, lon - 360, ifelse(lon < -180, lon + 360, lon))
return(lon_transformed)
}
#' spp_strategy_poleward_results <- spp_strategy_poleward(
#'   spp_trends_results,
#'   spp_trends_world_results = spp_trends_results,
#'   bonferroni = bonferroni_alpha,
#'   responses = responses
#' )
#' print(spp_strategy_poleward_results)
#' }
#'
#' @export
spp_strategy_poleward <- function(spp_trend_world_result, bonferroni = 0.05, responses = responses) {
classify_spatial_standard <- function(p, dif_p, trend) {
dplyr::case_when(
p > bonferroni ~ "SC",
p <= bonferroni & dif_p <= bonferroni & trend > 0 ~ "SA",
p <= bonferroni & dif_p <= bonferroni & trend < 0 ~ "SD",
TRUE ~ "SC"
)
}
classify_lat_poleward <- function(pvalue, dif_pvalue, trend, hemisphere) {
dplyr::case_when(
pvalue > bonferroni ~ "SC",
pvalue <= bonferroni & dif_pvalue <= bonferroni & trend > 0 & hemisphere == "North" ~ "SP",
pvalue <= bonferroni & dif_pvalue <= bonferroni & trend < 0 & hemisphere == "North" ~ "SE",
pvalue <= bonferroni & dif_pvalue <= bonferroni & trend < 0 & hemisphere == "South" ~ "SE",
pvalue <= bonferroni & dif_pvalue <= bonferroni & trend > 0 & hemisphere == "South" ~ "SP",
TRUE ~ "SC"
)
}
classify_thermal <- function(p, dif_p, trend) {
dplyr::case_when(
p > bonferroni ~ "TC",
p <= bonferroni & dif_p <= bonferroni & trend < 0 ~ "TA",
p <= bonferroni & dif_p <= bonferroni & trend > 0 ~ "TT",
TRUE ~ "TC"
)
}
required_cols <- c("species", "trend", "t", "pvalue", "responses", "dif_t", "dif_pvalue", "n", "hemisphere")
if (!all(required_cols %in% names(spp_trends_world_results))) {
missing_cols <- setdiff(required_cols, names(spp_trends_world_results))
stop(paste("Error: The following columns were not found in 'spp_trends_world_results':", paste(missing_cols, collapse = ", "), ". The required columns are:", paste(required_cols, collapse = ", ")))
}
strategies <- spp_trends_world_results %>%
dplyr::select(dplyr::all_of(intersect(required_cols, names(spp_trends_world_results)))) %>%
dplyr::mutate(
Spatial_Lat_Poleward = dplyr::case_when(
.data$responses == "Lat" ~ classify_lat_poleward(.data$pvalue, .data$dif_pvalue, .data$trend, .data$hemisphere),
TRUE ~ NA_character_
),
Spatial_Lon = dplyr::case_when(
.data$responses == "Lon" ~ classify_spatial_standard(.data$pvalue, .data$dif_pvalue, .data$trend),
TRUE ~ NA_character_
),
Spatial_Ele = dplyr::case_when(
.data$responses == "Ele" ~ classify_spatial_standard(.data$pvalue, .data$dif_pvalue, .data$trend),
TRUE ~ NA_character_
),
Thermal_Tmx = dplyr::case_when(
.data$responses == "Tmx" ~ classify_thermal(.data$pvalue, .data$dif_pvalue, .data$trend),
TRUE ~ NA_character_
),
Thermal_Tmn = dplyr::case_when(
.data$responses == "Tmn" ~ classify_thermal(.data$pvalue, .data$dif_pvalue, .data$trend),
TRUE ~ NA_character_
),
Thermal_Tme = dplyr::case_when(
.data$responses == "Tme" ~ classify_thermal(.data$pvalue, .data$dif_pvalue, .data$trend),
TRUE ~ NA_character_
)
) %>%
dplyr::group_by(species, hemisphere) %>%
dplyr::summarise(
n = sum(n),
Spatial_Lat_Poleward = dplyr::first(Spatial_Lat_Poleward),
Spatial_Lon = dplyr::first(Spatial_Lon[!is.na(Spatial_Lon)]),
Spatial_Ele = dplyr::if_else("Ele" %in% responses, dplyr::first(Spatial_Ele[!is.na(Spatial_Ele)]), NA_character_),
Thermal_Tmx = dplyr::if_else("Tmx" %in% responses, dplyr::first(Thermal_Tmx[!is.na(Thermal_Tmx)]), NA_character_),
Thermal_Tmn = dplyr::if_else("Tmn" %in% responses, dplyr::first(Thermal_Tmn[!is.na(Thermal_Tmn)]), NA_character_),
Thermal_Tme = dplyr::if_else("Tme" %in% responses, dplyr::first(Thermal_Tme[!is.na(Thermal_Tme)]), NA_character_),
.groups = "drop"
) %>%
tidyr::pivot_wider(names_from = hemisphere, values_from = Spatial_Lat_Poleward, names_prefix = "Lat_") %>%
dplyr::ungroup()
return(strategies)
}
spp_trends_world_results <- spp_trend_world_corrected(Data, spp, predictor, responses, n_min = 10)
bonferroni_alpha = 0.05/length(spp)  # Correct Bonferroni calculation
spp_strategy_poleward_results <- spp_strategy_poleward(spp_trends_world_results, bonferroni = bonferroni_alpha, responses = responses)
View(spp_strategy_poleward_results)
#'   Tmx = rnorm(500, 15, 10),
#'   Tmn = rnorm(500, 10, 8)
#' )
#' Data$year_month <- Data$year + Data$month * 0.075
#' predictor <- "year_month"
#' responses <- c("Lat", "Lon", "Tmx", "Tmn")
#' spp <- unique(Data$species)
#' general_trend_result <- spp_trend_world(Data, spp, predictor, responses, n_min = 50)
#'
#' @export
spp_trend_world <- function(Data, spp, predictor, responses, n_min = 50) {
transform_lon_antimeridian <- function(lon) {
lon_transformed <- ifelse(lon > 180, lon - 360, ifelse(lon < -180, lon + 360, lon))
return(lon_transformed)
}
Data$hemisphere <- ifelse(Data$Lat >= 0, "North", "South")
results_list <- list()
for (n in 1:length(spp)) {
ind <- Data[Data$species == spp[n], ]
ind_list <- split(ind, f = ind$hemisphere)
for (h in names(ind_list)) {
ind_sub <- ind_list[[h]]
data_hemisphere <- Data[Data$hemisphere == h, ]
if (nrow(ind_sub) > n_min) {
for (i in 1:length(responses)) {
tryCatch({
if (nrow(ind_sub) > 0 && nrow(data_hemisphere) > 0) {
ind_sub$group <- "i"
data_hemisphere$group <- "g"
dat <- rbind(data_hemisphere, ind_sub)
if (responses[i] == "Lon") {
ind_sub$Lon_transformed <- transform_lon_antimeridian(ind_sub$Lon)
dat$Lon_transformed <- transform_lon_antimeridian(dat$Lon) #Transformar también dat
model_i <- lm(formula(paste("Lon_transformed", paste(predictor, collapse = "+"), sep = " ~ ")), data = ind_sub)
model_int <- lm(formula(paste("Lon_transformed", paste(predictor, "*group", collapse = "+"), sep = " ~ ")), data = dat)
} else {
model_i <- lm(formula(paste(responses[i], paste(predictor, collapse = "+"), sep = " ~ ")), data = ind_sub)
model_int <- lm(formula(paste(responses[i], paste(predictor, "*group", collapse = "+"), sep = " ~ ")), data = dat)
}
trend <- coef(model_i)[2]
t_value <- summary(model_i)$coefficients[2, 3]
p_value <- summary(model_i)$coefficients[2, 4]
ci <- confint(model_i, predictor, level = .95)[, ]
dif_t <- summary(model_int)$coefficients[4, 3]
dif_p <- summary(model_int)$coefficients[4, 4]
if (responses[i] == "Lat" && h == "South") {
trend <- -trend
}
results_list[[length(results_list) + 1]] <- data.frame(
species = spp[n],
responses = responses[i],
trend = trend,
t = t_value,
pvalue = p_value,
ci_95_max = ci[2],
ci_95_min = ci[1],
dif_t = dif_t,
dif_pvalue = dif_p,
n = nrow(ind_sub),
hemisphere = h
)
} else {
cat(paste0("WARNING: Specie ", spp[n], " responses (", responses[i], ") has insufficient data.\n"))
}
}, error = function(e) {
cat(
paste0(
"WARNING: Specie ",
ind_sub[1, 1],
" responses (",
responses[i],
") has error: ",
conditionMessage(e),
"\n"
)
)
})
}
} else {
print(paste0("WARNING: Specie ", spp[n], " has few data in ", h, " hemisphere"))
}
}
}
if (length(results_list) > 0) {
spp_trend_result <- do.call(rbind, results_list)
} else {
spp_trend_result <- data.frame()
}
return(spp_trend_result)
}
#' spp_strategy_poleward_results <- spp_strategy_poleward(
#'   spp_trends_results,
#'   spp_trends_world_results = spp_trends_results,
#'   bonferroni = bonferroni_alpha,
#'   responses = responses
#' )
#' print(spp_strategy_poleward_results)
#' }
#'
#' @export
spp_strategy_poleward <- function(spp_trend_world_result, bonferroni = 0.05, responses = responses) {
classify_spatial_standard <- function(p, dif_p, trend) {
dplyr::case_when(
p > bonferroni ~ "SC",
p <= bonferroni & dif_p <= bonferroni & trend > 0 ~ "SA",
p <= bonferroni & dif_p <= bonferroni & trend < 0 ~ "SD",
TRUE ~ "SC"
)
}
classify_lat_poleward <- function(pvalue, dif_pvalue, trend, hemisphere) {
dplyr::case_when(
pvalue > bonferroni ~ "SC",
pvalue <= bonferroni & dif_pvalue <= bonferroni & trend > 0 & hemisphere == "North" ~ "SP",
pvalue <= bonferroni & dif_pvalue <= bonferroni & trend < 0 & hemisphere == "North" ~ "SE",
pvalue <= bonferroni & dif_pvalue <= bonferroni & trend < 0 & hemisphere == "South" ~ "SE",
pvalue <= bonferroni & dif_pvalue <= bonferroni & trend > 0 & hemisphere == "South" ~ "SP",
TRUE ~ "SC"
)
}
classify_thermal <- function(p, dif_p, trend) {
dplyr::case_when(
p > bonferroni ~ "TC",
p <= bonferroni & dif_p <= bonferroni & trend < 0 ~ "TA",
p <= bonferroni & dif_p <= bonferroni & trend > 0 ~ "TT",
TRUE ~ "TC"
)
}
required_cols <- c("species", "trend", "t", "pvalue", "responses", "dif_t", "dif_pvalue", "n", "hemisphere")
if (!all(required_cols %in% names(spp_trends_world_results))) {
missing_cols <- setdiff(required_cols, names(spp_trends_world_results))
stop(paste("Error: The following columns were not found in 'spp_trends_world_results':", paste(missing_cols, collapse = ", "), ". The required columns are:", paste(required_cols, collapse = ", ")))
}
strategies <- spp_trends_world_results %>%
dplyr::select(dplyr::all_of(intersect(required_cols, names(spp_trends_world_results)))) %>%
dplyr::mutate(
Spatial_Lat_Poleward = dplyr::case_when(
.data$responses == "Lat" ~ classify_lat_poleward(.data$pvalue, .data$dif_pvalue, .data$trend, .data$hemisphere),
TRUE ~ NA_character_
),
Spatial_Lon = dplyr::case_when(
.data$responses == "Lon" ~ classify_spatial_standard(.data$pvalue, .data$dif_pvalue, .data$trend),
TRUE ~ NA_character_
),
Spatial_Ele = dplyr::case_when(
.data$responses == "Ele" ~ classify_spatial_standard(.data$pvalue, .data$dif_pvalue, .data$trend),
TRUE ~ NA_character_
),
Thermal_Tmx = dplyr::case_when(
.data$responses == "Tmx" ~ classify_thermal(.data$pvalue, .data$dif_pvalue, .data$trend),
TRUE ~ NA_character_
),
Thermal_Tmn = dplyr::case_when(
.data$responses == "Tmn" ~ classify_thermal(.data$pvalue, .data$dif_pvalue, .data$trend),
TRUE ~ NA_character_
),
Thermal_Tme = dplyr::case_when(
.data$responses == "Tme" ~ classify_thermal(.data$pvalue, .data$dif_pvalue, .data$trend),
TRUE ~ NA_character_
)
) %>%
dplyr::group_by(species, hemisphere) %>%
dplyr::summarise(
n = sum(n),
Spatial_Lat_Poleward = dplyr::first(Spatial_Lat_Poleward),
Spatial_Lon = dplyr::first(Spatial_Lon[!is.na(Spatial_Lon)]),
Spatial_Ele = dplyr::if_else("Ele" %in% responses, dplyr::first(Spatial_Ele[!is.na(Spatial_Ele)]), NA_character_),
Thermal_Tmx = dplyr::if_else("Tmx" %in% responses, dplyr::first(Thermal_Tmx[!is.na(Thermal_Tmx)]), NA_character_),
Thermal_Tmn = dplyr::if_else("Tmn" %in% responses, dplyr::first(Thermal_Tmn[!is.na(Thermal_Tmn)]), NA_character_),
Thermal_Tme = dplyr::if_else("Tme" %in% responses, dplyr::first(Thermal_Tme[!is.na(Thermal_Tme)]), NA_character_),
.groups = "drop"
) %>%
tidyr::pivot_wider(names_from = hemisphere, values_from = Spatial_Lat_Poleward, names_prefix = "Lat_") %>%
dplyr::ungroup()
return(strategies)
}
Data <- readRDS("C:/A_TRABAJO/A_JORGE/SPP_VIRTUALES/THERMAL/Ocurrencias_aleatorias/muestreo_aleat_TA_TC_TT_percent_0.001.RDS")
colnames(Data) <- c("species","year","month","Lon","Lat","Tmx","Tmn","Tme", "spatialthermaltype")
Data$year_month <- Data$month * 0.075
Data$year_month <- Data$year + Data$year_month
predictor <- "year_month"
responses <- c("Tmx")
spp <- unique(Data$species)
library(tictoc)
tic()
spp_trends_world_results <- spp_trend_world(Data, spp, predictor, responses, n_min = 50)
bonferroni_alpha = 0.05/length(spp)  # Correct Bonferroni calculation
spp_strategy_poleward_results <- spp_strategy_poleward(spp_trends_world_results, bonferroni = bonferroni_alpha, responses = responses)
toc()
View(spp_strategy_poleward_results)
responses <- c("Lat" ,"Tmx")
spp <- unique(Data$species)
library(tictoc)
tic()
spp_trends_world_results <- spp_trend_world(Data, spp, predictor, responses, n_min = 50)
bonferroni_alpha = 0.05/length(spp)  # Correct Bonferroni calculation
spp_strategy_poleward_results <- spp_strategy_poleward(spp_trends_world_results, bonferroni = bonferroni_alpha, responses = responses)
toc()
View(spp_strategy_poleward_results)
library(dplyr)
library(sf)
set.seed(123) # Para reproducibilidad
# Parámetros
num_spp <- 100
num_years <- 100
years <- 1900:(1900 + num_years - 1)
# Generar especies SC (sin tendencia)
num_spp_sc <- 33 # 80% de las especies serán SC
spp_sc <- paste0("spp_", 1:num_spp_sc, "_SC")
data_sc <- lapply(spp_sc, function(sp) {
data.frame(
species = sp,
lat = runif(num_years, min = -70, max = 70),
lon = runif(num_years, min = -180, max = 180),
year = years
)
}) %>% bind_rows()
# Generar especies con tendencia (SA)
num_spp_sa <- num_spp - num_spp_sc # 20 especies con tendencia
spp_sa <- paste0("spp_", (num_spp_sc + 1):num_spp, "_SA")
data_sa <- lapply(spp_sa, function(sp) {
hemisphere <- sample(c("North", "South", "Both", "Opposite"), 1) # Asignar hemisferio aleatorio
if (hemisphere == "North") {
data.frame(
species = sp,
lat = runif(num_years, min = 30, max = 70) + (years - 1900) * 0.1, # Tendencia positiva en el norte
lon = runif(num_years, min = -180, max = 180),
year = years
) %>% filter(lat > 0)
} else if (hemisphere == "South") {
data.frame(
species = sp,
lat = runif(num_years, min = -70, max = -30) - (years - 1900) * 0.1, # Tendencia negativa en el sur
lon = runif(num_years, min = -180, max = 180),
year = years
) %>% filter(lat < 0)
} else if(hemisphere == "Both"){
rbind(
data.frame(
species = sp,
lat = runif(num_years / 2, min = -70, max = -30) - (years[1:(num_years / 2)] - 1900) * 0.1, # Tendencia negativa en el sur
lon = runif(num_years / 2, min = -180, max = 180),
year = years[1:(num_years / 2)]
) %>% filter(lat < 0),
data.frame(
species = sp,
lat = runif(num_years / 2, min = 30, max = 70) + (years[(num_years / 2 + 1):num_years] - 1900) * 0.1, # Tendencia positiva en el norte
lon = runif(num_years / 2, min = -180, max = 180),
year = years[(num_years / 2 + 1):num_years]
) %>% filter(lat >0)
)
} else {
rbind(
data.frame(
species = sp,
lat = runif(num_years / 2, min = -30, max = -70) + (years[1:(num_years / 2)] - 1900) * 0.1, # Tendencia negativa en el sur
lon = runif(num_years / 2, min = -180, max = 180),
year = years[1:(num_years / 2)]
) %>% filter(lat < 0),
data.frame(
species = sp,
lat = runif(num_years / 2, min = 30, max = 70) + (years[(num_years / 2 + 1):num_years] - 1900) * 0.1, # Tendencia positiva en el norte
lon = runif(num_years / 2, min = -180, max = 180),
year = years[(num_years / 2 + 1):num_years]
) %>% filter(lat >0)
)
}
}) %>% bind_rows()
# Combinar todos los datos
Data <- bind_rows(data_sc, data_sa)
colnames(Data)
colnames(Data) <- c("species","Lat"  ,   "Lon"   ,  "year" )
Data$year_month <- Data$month * 0.075
predictor <- "year"
responses <- c("Lat")
spp <- unique(Data$species)
spp_trends_world_results <- spp_trend_world(Data, spp, predictor, responses, n_min = 50)
spp_trends_world_results <- spp_trend_world(Data, spp, predictor, responses, n_min = 10)
spp_strategy_poleward_results <- spp_strategy_poleward(spp_trend_world_result, bonferroni = 0.05, responses = responses)
View(spp_strategy_poleward_results)
